#+TITLE: Report of TOP Project
#+AUTHOR: Bouton Nicolas
#+DATE: April 2021

* Debugging
** Multiple definition

   For beginnig the code have a link problem at the compile time because we
   define 3 variables in *lbm_phys.h* and we redefine them in *lbm_phys.h*. Then
   we have a multiple definition.

   #+BEGIN_SRC shell
[148] [sholde@ground simu_simple_LBM] (master) (6m32s) $ make
mpicc -Wall -g -c -o main.o main.c
mpicc -Wall -g -c -o lbm_phys.o lbm_phys.c
mpicc -Wall -g -c -o lbm_init.o lbm_init.c
mpicc -Wall -g -c -o lbm_struct.o lbm_struct.c
mpicc -Wall -g -c -o lbm_comm.o lbm_comm.c
mpicc -Wall -g -c -o lbm_config.o lbm_config.c
mpicc -Wall -g -o lbm main.o lbm_phys.o lbm_init.o lbm_struct.o lbm_comm.o lbm_config.o -lm
/usr/bin/ld : lbm_phys.o:/home/sholde/dev/master/M1/S2/hm/top_project/simu_simple_LBM/lbm_phys.h:9 : définitions multiples de « opposite_of »; main.o:/home/sholde/dev/master/M1/S2/hm/top_project/simu_simple_LBM/lbm_phys.h:9 : défini pour la première fois ici
/usr/bin/ld : lbm_phys.o:/home/sholde/dev/master/M1/S2/hm/top_project/simu_simple_LBM/lbm_phys.h:10 : définitions multiples de « equil_weight »; main.o:/home/sholde/dev/master/M1/S2/hm/top_project/simu_simple_LBM/lbm_phys.h:10 : défini pour la première fois ici
/usr/bin/ld : lbm_phys.o:/home/sholde/dev/master/M1/S2/hm/top_project/simu_simple_LBM/lbm_phys.h:11 : définitions multiples de « direction_matrix »; main.o:/home/sholde/dev/master/M1/S2/hm/top_project/simu_simple_LBM/lbm_phys.h:11 : défini pour la première fois ici
/usr/bin/ld : lbm_init.o:/home/sholde/dev/master/M1/S2/hm/top_project/simu_simple_LBM/lbm_phys.h:9 : définitions multiples de « opposite_of »; main.o:/home/sholde/dev/master/M1/S2/hm/top_project/simu_simple_LBM/lbm_phys.h:9 : défini pour la première fois ici
/usr/bin/ld : lbm_init.o:/home/sholde/dev/master/M1/S2/hm/top_project/simu_simple_LBM/lbm_phys.h:10 : définitions multiples de « equil_weight »; main.o:/home/sholde/dev/master/M1/S2/hm/top_project/simu_simple_LBM/lbm_phys.h:10 : défini pour la première fois ici
/usr/bin/ld : lbm_init.o:/home/sholde/dev/master/M1/S2/hm/top_project/simu_simple_LBM/lbm_phys.h:11 : définitions multiples de « direction_matrix »; main.o:/home/sholde/dev/master/M1/S2/hm/top_project/simu_simple_LBM/lbm_phys.h:11 : défini pour la première fois ici
collect2: erreur: ld a retourné le statut de sortie 1
make: *** [Makefile:24 : lbm] Erreur 1
   #+END_SRC

   To fix the problem we just need to mark these variable extern in header file
   to indicate they are define in another file.

   #+BEGIN_SRC c
/********************** CONSTS **********************/
extern const int opposite_of[DIRECTIONS];
extern const double equil_weight[DIRECTIONS];
extern const Vector direction_matrix[DIRECTIONS];
   #+END_SRC

** Program doesn't give back and abort sometimes

   When we execute the code now, with the command ~mpirun -np 512
   --oversubscribe ./lbm~, thr program doesn't give back.

   I decide to run *gdb* and try to identify where we block. And *gdb* say me
   that I have a *segfault* in the function
   *setup_init_state_global_poiseuille_profile* in file *lbm_init.c* at line 85.

   This line contain the result of a call fonction. But as the *segfault* is in
   this function, it is not in the call funtion. Therefore it is the affectaion
   the error and either the array are not allocate or we go out of the limit of
   our array.

   When I reading the code I saw in the init function that malloc call was
   commented. I decomment it and the error is corrected.

** Program doesn't give back and abort sometimes 2

   I re-run *gdb* and it says me that I have a *segfault* when I call the
   *libc*. It is true because an allocation via *malloc* failed (printed in
   stdout).
   
   #+BEGIN_SRC shell
malloc: Permission denied
   #+END_SRC

   The problem was that I don't realize we set address of the last problem to
   *NULL* after we allocate it. I deleted the line.

   #+BEGIN_SRC c
mesh->cell = NULL;
   #+END_SRC
** Run the program

   Then I run the program with a reduce number of iteration (16) and without
   *MPI*. The program finish without crashing.

   I decide to run it with *MPI* but it doesn't give back again and doesn't
   print on standart output anything. I decide to inspect the code and find an
   error of communication maybe.

   The problem is that on the *main* function, we autorize only the
   *RANK_MASTER* process to execute the function *close_file*. But in this
   function we have a *MPI* barrier with *MPI_COMM_WORLD* that wait all
   process. And the problem is that others threads haven't a *MPI* barrier. Thus
   the *RANK_MASTER* wait infinitely.

   To patch this, I remove the line of *MPI* barrier in *close_file* function.

